[{"C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\index.js":"1","C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\reportWebVitals.js":"2","C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\App.js":"3","C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\contracts\\SaveData.js":"4","C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\routes\\AddData.js":"5","C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\contracts\\PatientData.js":"6","C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\routes\\Add.js":"7","C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\routes\\AddMedicalData.js":"8","C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\routes\\ShowData.js":"9","C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\server\\sendToServerForSecondEncryption.js":"10"},{"size":786,"mtime":1713189296634,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1713189296687,"results":"13","hashOfConfig":"12"},{"size":7783,"mtime":1714037237980,"results":"14","hashOfConfig":"12"},{"size":1784,"mtime":1713889796447,"results":"15","hashOfConfig":"12"},{"size":2935,"mtime":1713189296979,"results":"16","hashOfConfig":"12"},{"size":3654,"mtime":1713981957732,"results":"17","hashOfConfig":"12"},{"size":1465,"mtime":1713189296924,"results":"18","hashOfConfig":"12"},{"size":4932,"mtime":1713189297079,"results":"19","hashOfConfig":"12"},{"size":3174,"mtime":1713189297129,"results":"20","hashOfConfig":"12"},{"size":752,"mtime":1713189297324,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1cz37fe",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\index.js",[],["47","48"],"C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\reportWebVitals.js",[],"C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\App.js",["49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64"],"import { Box, Card, CardContent, Container, Paper } from '@material-ui/core'\nimport { useEffect, useState } from 'react'\nimport Web3 from 'web3'\nimport style from './App.module.css'\nimport {\n  PATIENT_DATA_LIST_ADDRESS,\n  PATIENT_DATA_LIST_ABI,\n} from './contracts/PatientData'\nimport {\n  SAVE_DATA_LIST_ADDRESS,\n  SAVE_DATA_LIST_ABI\n} from './contracts/SaveData'\nimport Add from './routes/Add'\nimport AddData from './routes/AddData'\nimport AddMedicalData from './routes/AddMedicalData'\nimport ShowData from './routes/ShowData'\nimport CryptoJS from 'crypto-js'\nimport sendToServerForSecondEncryption from './server/sendToServerForSecondEncryption'\n\nfunction App() {\n  const [web3, setweb3] = useState()\n  const [account, setAccount] = useState('')\n  const [patientDataList, setPatientDataList] = useState([])\n  const [patientDataContract, setPatientDataContract] = useState([])\n  const [saveDataContract, setSaveDataContract] = useState([])\n  const [patientBioMedList, setPatientBioMedList] = useState([])\n  const [patientMedicalDataList, setPatientMedicalDataList] = useState([])\n  const [patientBio, setPatientBio] = useState({\n    id: 'PES2UG21CS623',\n    name: 'YASHWANTH RAO',\n    birthDate: '22 sep 2004',\n    phoneNumber: '1234565432',\n    _address: 'flat 320 anand complex vaishali nagar bhilai cg',\n  })\n  const [patientMedicalData, setPatientMedicalData] = useState({\n    medReportId: 'MEDREP' + Math.ceil(Math.random() * 1000000000),\n    weight: '158',\n    height: '164',\n    bloodGroup: 'O+',\n    diseaseName: 'Hyper Myopia',\n    diseaseDescription:\n      'caused by long exposure to harmful artificial blue light',\n    diseaseStartedOn: '1 apr 2024',\n  })\n\n  useEffect(async () => {\n    const web3 = new Web3(Web3.givenProvider || 'http://localhost:8545')\n    const network = await web3.eth.net.getNetworkType()\n    const accounts = await web3.eth.requestAccounts()\n    setAccount(accounts[0])\n    console.log(accounts[0])\n    const patientDataContractCopy = new web3.eth.Contract(\n      PATIENT_DATA_LIST_ABI,\n      PATIENT_DATA_LIST_ADDRESS,\n    )\n    const saveDataContractCopy = new web3.eth.Contract(\n      SAVE_DATA_LIST_ABI,\n      SAVE_DATA_LIST_ADDRESS,\n    )\n    // console.log('volla', network, accounts, await patientDataContractCopy.methods.patients(0).call())\n    setPatientDataContract(patientDataContractCopy)\n    setSaveDataContract(saveDataContractCopy)\n    // updateList(patientDataContractCopy, accounts[0])\n    decryptEncryptedList(saveDataContractCopy)\n    console.log(patientDataContractCopy)\n    return () => {}\n  }, [])\n\n  const updateList = async (patientDataContract, acc) => {\n    const senders = await patientDataContract.methods.senders(acc).call()\n    // const medicalReports = await patientDataContract.methods.medicalReports(0).call()\n    // let countMedicalReports = await patientDataContract.methods\n    //   .countMedicalReports()\n    //   .call()\n    let countMedicalReports = senders.patientCount\n\n    console.log(countMedicalReports)\n\n    let patientBioMedList = []\n\n    for (let i = 0; i < countMedicalReports; ++i) {\n      console.log(await patientDataContract.methods.getPatientsList(i).call())\n      let patientBio = await patientDataContract.methods\n        .getPatientsList(i)\n        .call()\n      let patientMedicalReport = await patientDataContract.methods\n        .medicalReports(parseInt(parseInt(patientBio[4])))\n        .call()\n\n      let patientBioMedObj = {\n        name: patientBio[0],\n        birthDate: patientBio[1],\n        phoneNumber: patientBio[2],\n        _address: patientBio[3],\n        medicalReportNo: patientBio[4],\n        senderId: patientMedicalReport.senderId,\n        medReportId: patientMedicalReport.medReportId,\n        weight: patientMedicalReport.weight,\n        height: patientMedicalReport.height,\n        bloodGroup: patientMedicalReport.bloodGroup,\n        diseaseName: patientMedicalReport.diseaseName,\n        diseaseDescription: patientMedicalReport.diseaseDescription,\n        diseaseStartedOn: patientMedicalReport.diseaseStartedOn,\n      }\n      patientBioMedList.push(patientBioMedObj)\n    }\n    setPatientBioMedList(patientBioMedList)\n    console.log(senders, patientBioMedList)\n  }\n\n  const decryptEncryptedList = async (saveDataContract) => {\n    let patientBioMedList = []\n\n    const totalMedicalReports = await saveDataContract.methods.totalMedicalReports().call()\n    for(let i = 0; i < totalMedicalReports; ++i)\n    {\n      const {\n        hashOfOriginalDataString,\n        secondTimeEncryptedString,\n        sender,\n        medReportId\n      } = await saveDataContract.methods.data(i).call()\n      let firstCiphertext = sendToServerForSecondEncryption\n              .decryptSecondCipherText(secondTimeEncryptedString, sender, medReportId)\n      let originalDataObject = JSON.parse(CryptoJS.AES.decrypt(firstCiphertext, hashOfOriginalDataString).toString(CryptoJS.enc.Utf8));\n      console.log(originalDataObject)\n      let rowData = {...originalDataObject.patientBio, ...originalDataObject.patientMedicalData}\n      patientBioMedList.push(rowData)\n    }\n    console.log(patientBioMedList)\n    setPatientBioMedList(patientBioMedList)\n  }\n\n  // const addUpdatePatientBio = () => {\n  //   patientDataContract.methods\n  //     .addUpdatePatientBio(\n  //       patientBio.name,\n  //       patientBio.birthDate,\n  //       patientBio.phoneNumber,\n  //       patientBio._address,\n  //     )\n  //     .send({ from: account })\n  //     .once('receipt', (receipt) => {\n  //       console.log('saved')\n  //       updateList(patientDataContract, account)\n  //     })\n  // }\n\n  const addUpdatePatientMedicalData = () => {\n    console.log(patientBio, patientMedicalData)\n    // patientDataContract.methods\n    //   .addMedicalReport(\n    //     patientBio.id,\n    //     patientBio.name,\n    //     patientBio.birthDate,\n    //     patientBio.phoneNumber,\n    //     patientBio._address,\n    //     patientMedicalData.medReportId,\n    //     parseInt(patientMedicalData.weight),\n    //     parseInt(patientMedicalData.height),\n    //     patientMedicalData.bloodGroup,\n    //     patientMedicalData.diseaseName,\n    //     patientMedicalData.diseaseDescription,\n    //     patientMedicalData.diseaseStartedOn,\n    //   )\n    //   .send({ from: account })\n    //   .once('receipt', (receipt) => {\n    //     console.log('saved', receipt)\n    //     updateList(patientDataContract, account)\n    //   })\n    let JSONStringData = JSON.stringify({patientBio, patientMedicalData})\n    let hash = CryptoJS.SHA256(JSONStringData).toString(CryptoJS.enc.Hex)\n    console.log(hash)\n    let firstCiphertext = CryptoJS.AES.encrypt(JSONStringData, hash).toString();\n    console.log(firstCiphertext)\n    let secondCiphertext = sendToServerForSecondEncryption.encryptFirstCipherText(firstCiphertext, account, patientMedicalData.medReportId)\n    console.log(secondCiphertext)\n    saveDataContract.methods\n      .saveData(secondCiphertext, hash, patientMedicalData.medReportId).send({ from: account})\n      .once('receipt', receipt => {\n        console.log('saved', receipt)\n        // updateList(patientDataContract, account)\n    setPatientMedicalData({...patientMedicalData, medReportId: 'MEDREP' + Math.ceil(Math.random() * 1000000000)})\n    decryptEncryptedList(saveDataContract)\n      })\n  }\n\n  return (\n    <Container maxWidth=\"md\" className={style.container}>\n      <Add\n        patientBio={patientBio}\n        setPatientBio={(obj) => setPatientBio(obj)}\n        // addUpdatePatientBio={addUpdatePatientBio}\n        patientMedicalData={patientMedicalData}\n        setPatientMedicalData={(obj) => setPatientMedicalData(obj)}\n        addUpdatePatientMedicalData={addUpdatePatientMedicalData}\n      />\n      <ShowData patientBioMedList={patientBioMedList} />\n    </Container>\n  )\n}\n\nexport default App\n","C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\contracts\\SaveData.js",[],"C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\routes\\AddData.js",["65","66","67","68","69","70","71","72","73"],"import { Box, Button, Card, Container, Grid, InputAdornment, TextField } from '@material-ui/core'\nimport { KeyboardDatePicker } from '@material-ui/pickers'\nimport React, { useState } from 'react'\nimport style from './AddData.module.css'\n\nexport default function AddData(props) {\n  const {\n    patientBio,\n    setPatientBio,\n    addUpdatePatientBio,\n    next,\n  } = props\n\n  const handleChange = (e) => {\n    if (\n      patientBio.name == '' ||\n      patientBio.phoneNumber == '' ||\n      patientBio._address == '' ||\n      patientBio.birthday == ''\n    ) {\n      alert('all fields are required')\n      return\n    }\n    if (window.confirm('Are you sure that you want to save this data')) {\n      next()\n    }\n  }\n\n  const as = (e) => {\n    console.log(e._d.toDateString())\n    if(e && e._d)\n    setPatientBio({ ...patientBio, birthDate: e._d.toDateString() })\n  }\n  return (\n    <div className={style.cardContainer}>\n      <Card className={style.card} elevation={0}>\n        <h2 className={style.h2}>Patient Bio Data</h2>\n        <form className={style.form} noValidate autoComplete=\"off\">\n        <TextField\n            id=\"outlined-basic\"\n            label=\"Patient ID\"\n            variant=\"outlined\"\n            value={patientBio.id}\n            onChange={(e) =>\n              setPatientBio({ ...patientBio, id: e.target.value })\n            }\n          />\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Name\"\n            variant=\"outlined\"\n            value={patientBio.name}\n            onChange={(e) =>\n              setPatientBio({ ...patientBio, name: e.target.value })\n            }\n          />\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Birth-date\"\n            format=\"DD/MM/yyyy\"\n            value={patientBio.birthDate}\n            // variant=\"inline\"\n            inputVariant=\"outlined\"\n            onChange={(e) => as(e)}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n          <TextField\n            id=\"outlined-basic\"\n            label=\"PhoneNumber\"\n            variant=\"outlined\"\n            value={patientBio.phoneNumber}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">+91</InputAdornment>,\n            }}\n            onChange={(e) =>\n              setPatientBio({ ...patientBio, phoneNumber: e.target.value })\n            }\n          />\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Address\"\n            variant=\"outlined\"\n            value={patientBio._address}\n            multiline\n            rows={2}\n            onChange={(e) =>\n              setPatientBio({ ...patientBio, _address: e.target.value })\n            }\n          />\n          <Button className={style.btn} onClick={(e) => handleChange()}>\n            Next\n          </Button>\n        </form>\n      </Card>\n    </div>\n  )\n}\n","C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\contracts\\PatientData.js",[],"C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\routes\\Add.js",[],"C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\routes\\AddMedicalData.js",["74","75","76","77","78","79","80","81","82","83"],"import {\n  Box,\n  Button,\n  Card,\n  Container,\n  Grid,\n  InputAdornment,\n  TextField,\n} from '@material-ui/core'\nimport { KeyboardDatePicker } from '@material-ui/pickers'\nimport React, { useState } from 'react'\nimport style from './AddData.module.css'\n\nexport default function AddMedicalData(props) {\n  const {\n    patientMedicalData,\n    setPatientMedicalData,\n    addUpdatePatientMedicalData,\n    handleBack,\n  } = props\n\n  const handleChange = (e) => {\n    if (\n      patientMedicalData.weight == '' ||\n      patientMedicalData.height == '' ||\n      patientMedicalData.bloodGroup == '' ||\n      patientMedicalData.diseaseName == '' ||\n      patientMedicalData.diseaseDescription == '' ||\n      patientMedicalData.diseaseStartedOn == ''\n    ) {\n      alert('all fields are required')\n      return\n    }\n    if (window.confirm('Are you sure that you want to save this data')) {\n      addUpdatePatientMedicalData()\n    }\n  }\n\n  const as = (e) => {\n    console.log(e._d.toDateString())\n    if (e && e._d)\n      setPatientMedicalData({\n        ...patientMedicalData,\n        diseaseStartedOn: e._d.toDateString(),\n      })\n  }\n  return (\n    <div className={style.cardContainer}>\n      <Card className={style.card} elevation={0}>\n        <h2 className={style.h2}>Patient Medical Data</h2>\n        <form className={style.form} noValidate autoComplete=\"off\">\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Medical Report ID\"\n            variant=\"outlined\"\n            value={patientMedicalData.medReportId}\n            onChange={(e) =>\n              setPatientMedicalData({\n                ...patientMedicalData,\n                medReportId: e.target.value,\n              })\n            }\n          />\n          <div  className={style.textFieldGroup}>\n            <TextField\n              id=\"outlined-basic\"\n              label=\"Weight\"\n              variant=\"outlined\"\n              value={patientMedicalData.weight}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">KG</InputAdornment>\n                ),\n              }}\n              onChange={(e) =>\n                setPatientMedicalData({\n                  ...patientMedicalData,\n                  weight: e.target.value,\n                })\n              }\n            />\n            <TextField\n              id=\"outlined-basic\"\n              label=\"Height\"\n              variant=\"outlined\"\n              value={patientMedicalData.height}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">cm</InputAdornment>\n                ),\n              }}\n              onChange={(e) =>\n                setPatientMedicalData({\n                  ...patientMedicalData,\n                  height: e.target.value,\n                })\n              }\n            />\n          </div>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Disease Name\"\n            variant=\"outlined\"\n            value={patientMedicalData.diseaseName}\n            onChange={(e) =>\n              setPatientMedicalData({\n                ...patientMedicalData,\n                diseaseName: e.target.value,\n              })\n            }\n          />\n          <div  className={style.textFieldGroup}>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Blood Group\"\n            variant=\"outlined\"\n            value={patientMedicalData.bloodGroup}\n            onChange={(e) =>\n              setPatientMedicalData({\n                ...patientMedicalData,\n                bloodGroup: e.target.value,\n              })\n            }\n          />\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Disease Started On\"\n            format=\"DD/MM/yyyy\"\n            className={style.date}\n            value={patientMedicalData.diseaseStartedOn}\n            // variant=\"inline\"\n            inputVariant=\"outlined\"\n            onChange={(e) => as(e)}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n          </div>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Description\"\n            variant=\"outlined\"\n            value={patientMedicalData.diseaseDescription}\n            multiline\n            rows={2}\n            onChange={(e) =>\n              setPatientMedicalData({\n                ...patientMedicalData,\n                diseaseDescription: e.target.value,\n              })\n            }\n          />\n          <div className={style.btnGroup}>\n            <Button\n              className={[style.btn, style.btnRed].join(' ')}\n              onClick={handleBack}\n            >\n              Back\n            </Button>\n            <Button className={style.btn} onClick={(e) => handleChange()}>\n              Save\n            </Button>\n          </div>\n        </form>\n      </Card>\n    </div>\n  )\n}\n","C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\routes\\ShowData.js",["84","85","86"],"import React, { useState } from 'react'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport style from './AddData.module.css'\nimport style2 from './ShowData.module.css'\nimport { Card } from '@material-ui/core'\n\nexport default function ShowData(props) {\n  const { patientBioMedList } = props\n\n  const formatDate = (dateString) => {\n    if(dateString == \"\" || dateString == undefined)\n      return undefined\n\n    const dateObj = new Date(dateString)\n    \n    const date = dateObj.getDate()\n    const month = dateObj.getMonth()\n    const year = dateObj.getFullYear()\n    const currentYear = new Date().getFullYear()\n    const currentMonth = new Date().getMonth()\n    const currentDate = new Date().getDate()\n    let age = currentYear - year\n    age = currentDate >= date && currentMonth >= month ? age : age - 1\n\n    return `${date}/${month + 1}/${year} ${age}yrs`\n  }\n  return (\n    <div className={style2.showDataContainer}>\n      <Card className={style2.card}>\n        <h2 className={style.h2}>Patient's Medical Data</h2>\n        <TableContainer component={Paper}>\n          <Table className={style.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Sno.</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Birth Date</TableCell>\n                <TableCell>Phone Number</TableCell>\n                <TableCell>Address</TableCell>\n                <TableCell>weight</TableCell>\n                <TableCell>height</TableCell>\n                <TableCell>blood Group</TableCell>\n                <TableCell>Disease Name</TableCell>\n                <TableCell style={{minWidth:'200px'}}>Disease Description</TableCell>\n                <TableCell>Disease StartedOn</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {patientBioMedList.map((row, index) => (\n                <TableRow key={index}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {index + 1}\n                  </TableCell>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell>{formatDate(row.birthDate)}</TableCell>\n                  <TableCell>{row.phoneNumber}</TableCell>\n                  <TableCell>{row._address}</TableCell>\n                  <TableCell>{row.weight}</TableCell>\n                  <TableCell>{row.height}</TableCell>\n                  <TableCell>{row.bloodGroup}</TableCell>\n                  <TableCell>{row.diseaseName}</TableCell>\n                  <TableCell>{row.diseaseDescription}</TableCell>\n                  <TableCell>{formatDate(row.diseaseStartedOn)}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Card>\n    </div>\n  )\n}\n","C:\\Users\\keert\\OneDrive\\Desktop\\coding\\sem 6\\Blockchain\\blockchain-master\\src\\server\\sendToServerForSecondEncryption.js",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":1,"column":10,"nodeType":"93","messageId":"94","endLine":1,"endColumn":13},{"ruleId":"91","severity":1,"message":"95","line":1,"column":15,"nodeType":"93","messageId":"94","endLine":1,"endColumn":19},{"ruleId":"91","severity":1,"message":"96","line":1,"column":21,"nodeType":"93","messageId":"94","endLine":1,"endColumn":32},{"ruleId":"91","severity":1,"message":"97","line":1,"column":45,"nodeType":"93","messageId":"94","endLine":1,"endColumn":50},{"ruleId":"91","severity":1,"message":"98","line":14,"column":8,"nodeType":"93","messageId":"94","endLine":14,"endColumn":15},{"ruleId":"91","severity":1,"message":"99","line":15,"column":8,"nodeType":"93","messageId":"94","endLine":15,"endColumn":22},{"ruleId":"91","severity":1,"message":"100","line":21,"column":10,"nodeType":"93","messageId":"94","endLine":21,"endColumn":14},{"ruleId":"91","severity":1,"message":"101","line":21,"column":16,"nodeType":"93","messageId":"94","endLine":21,"endColumn":23},{"ruleId":"91","severity":1,"message":"102","line":23,"column":10,"nodeType":"93","messageId":"94","endLine":23,"endColumn":25},{"ruleId":"91","severity":1,"message":"103","line":23,"column":27,"nodeType":"93","messageId":"94","endLine":23,"endColumn":45},{"ruleId":"91","severity":1,"message":"104","line":24,"column":10,"nodeType":"93","messageId":"94","endLine":24,"endColumn":29},{"ruleId":"91","severity":1,"message":"105","line":27,"column":10,"nodeType":"93","messageId":"94","endLine":27,"endColumn":32},{"ruleId":"91","severity":1,"message":"106","line":27,"column":34,"nodeType":"93","messageId":"94","endLine":27,"endColumn":59},{"ruleId":"107","severity":1,"message":"108","line":46,"column":13,"nodeType":"109","endLine":67,"endColumn":4},{"ruleId":"91","severity":1,"message":"110","line":48,"column":11,"nodeType":"93","messageId":"94","endLine":48,"endColumn":18},{"ruleId":"91","severity":1,"message":"111","line":69,"column":9,"nodeType":"93","messageId":"94","endLine":69,"endColumn":19},{"ruleId":"91","severity":1,"message":"92","line":1,"column":10,"nodeType":"93","messageId":"94","endLine":1,"endColumn":13},{"ruleId":"91","severity":1,"message":"112","line":1,"column":29,"nodeType":"93","messageId":"94","endLine":1,"endColumn":38},{"ruleId":"91","severity":1,"message":"113","line":1,"column":40,"nodeType":"93","messageId":"94","endLine":1,"endColumn":44},{"ruleId":"91","severity":1,"message":"114","line":3,"column":17,"nodeType":"93","messageId":"94","endLine":3,"endColumn":25},{"ruleId":"91","severity":1,"message":"115","line":10,"column":5,"nodeType":"93","messageId":"94","endLine":10,"endColumn":24},{"ruleId":"116","severity":1,"message":"117","line":16,"column":23,"nodeType":"118","messageId":"119","endLine":16,"endColumn":25},{"ruleId":"116","severity":1,"message":"117","line":17,"column":30,"nodeType":"118","messageId":"119","endLine":17,"endColumn":32},{"ruleId":"116","severity":1,"message":"117","line":18,"column":27,"nodeType":"118","messageId":"119","endLine":18,"endColumn":29},{"ruleId":"116","severity":1,"message":"117","line":19,"column":27,"nodeType":"118","messageId":"119","endLine":19,"endColumn":29},{"ruleId":"91","severity":1,"message":"92","line":2,"column":3,"nodeType":"93","messageId":"94","endLine":2,"endColumn":6},{"ruleId":"91","severity":1,"message":"112","line":5,"column":3,"nodeType":"93","messageId":"94","endLine":5,"endColumn":12},{"ruleId":"91","severity":1,"message":"113","line":6,"column":3,"nodeType":"93","messageId":"94","endLine":6,"endColumn":7},{"ruleId":"91","severity":1,"message":"114","line":11,"column":17,"nodeType":"93","messageId":"94","endLine":11,"endColumn":25},{"ruleId":"116","severity":1,"message":"117","line":24,"column":33,"nodeType":"118","messageId":"119","endLine":24,"endColumn":35},{"ruleId":"116","severity":1,"message":"117","line":25,"column":33,"nodeType":"118","messageId":"119","endLine":25,"endColumn":35},{"ruleId":"116","severity":1,"message":"117","line":26,"column":37,"nodeType":"118","messageId":"119","endLine":26,"endColumn":39},{"ruleId":"116","severity":1,"message":"117","line":27,"column":38,"nodeType":"118","messageId":"119","endLine":27,"endColumn":40},{"ruleId":"116","severity":1,"message":"117","line":28,"column":45,"nodeType":"118","messageId":"119","endLine":28,"endColumn":47},{"ruleId":"116","severity":1,"message":"117","line":29,"column":43,"nodeType":"118","messageId":"119","endLine":29,"endColumn":45},{"ruleId":"91","severity":1,"message":"114","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":25},{"ruleId":"116","severity":1,"message":"117","line":17,"column":19,"nodeType":"118","messageId":"119","endLine":17,"endColumn":21},{"ruleId":"116","severity":1,"message":"117","line":17,"column":39,"nodeType":"118","messageId":"119","endLine":17,"endColumn":41},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'CardContent' is defined but never used.","'Paper' is defined but never used.","'AddData' is defined but never used.","'AddMedicalData' is defined but never used.","'web3' is assigned a value but never used.","'setweb3' is assigned a value but never used.","'patientDataList' is assigned a value but never used.","'setPatientDataList' is assigned a value but never used.","'patientDataContract' is assigned a value but never used.","'patientMedicalDataList' is assigned a value but never used.","'setPatientMedicalDataList' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'network' is assigned a value but never used.","'updateList' is assigned a value but never used.","'Container' is defined but never used.","'Grid' is defined but never used.","'useState' is defined but never used.","'addUpdatePatientBio' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]